package main

import (
	"bufio"
	"bytes"
	"fmt"
	"os/exec"
	"strings"
)

func main() {}

type Formula struct {
	Name    string
	Version string
}

func NewBrew() *Brew { return &Brew{} }

type Brew struct{}

func (b *Brew) ListVersions() ([]Formula, error) {
	output, err := exec.Command("brew", "list", "--versions").CombinedOutput()
	if err != nil {
		return nil, err
	}
	scanner := bufio.NewScanner(bytes.NewBuffer(output))
	out := []Formula{}
	for scanner.Scan() {
		text := scanner.Text()
		f := Formula{}
		f.Name, f.Version, _ = strings.Cut(text, " ")
		if f.Name == "" || f.Version == "" {
			return nil, fmt.Errorf("error reading listed version from version line: %q", text)
		}
		out = append(out, f)
	}
	return out, nil
}

type Dependency struct {
	Source     string
	Dependency string
}

func (b *Brew) DepsGraph(name string) ([]Dependency, error) {
	output, err := exec.Command("brew", "deps", "--graph", "--dot", name).CombinedOutput()
	if err != nil {
		return nil, err
	}
	scanner := bufio.NewScanner(bytes.NewBuffer(output))
	out := []Dependency{}
	for scanner.Scan() {
		text := scanner.Text()
		if !strings.Contains(text, "->") {
			continue
		}
		d := Dependency{}
		d.Source, d.Dependency, _ = strings.Cut(text, " -> ")
		d.Source = strings.Trim(d.Source, " \"")
		d.Dependency = strings.Trim(d.Dependency, " \"")
		out = append(out, d)
	}
	return out, nil
}

type AutoGenerated []struct {
	Name     string `json:"name"`
	Versions struct {
		Stable string `json:"stable"`
		Head   string `json:"head"`
		Bottle bool   `json:"bottle"`
	} `json:"versions"`
	Dependencies      []string `json:"dependencies"`
	BuildDependencies []string `json:"build_dependencies"`
}
